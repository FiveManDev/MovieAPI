// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAPI.Data.DbConfig;

#nullable disable

namespace MovieAPI.Migrations
{
    [DbContext(typeof(MovieAPIDbContext))]
    [Migration("20220927174217_DbInit")]
    partial class DbInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieAPI.Data.Authorization", b =>
                {
                    b.Property<Guid>("AuthorizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AuthorizationLevel")
                        .HasColumnType("int");

                    b.Property<string>("AuthorizationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorizationID");

                    b.ToTable("Authorization", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorizationID = new Guid("6558f909-ca15-49dd-91bf-d73b6e4565d1"),
                            AuthorizationLevel = 1,
                            AuthorizationName = "Normal User"
                        },
                        new
                        {
                            AuthorizationID = new Guid("2932094d-2529-4913-8ca9-319be843e172"),
                            AuthorizationLevel = 2,
                            AuthorizationName = "Film Poducer"
                        },
                        new
                        {
                            AuthorizationID = new Guid("a025a153-97ea-46d1-ba30-f468cb44f4f0"),
                            AuthorizationLevel = 3,
                            AuthorizationName = "Admin"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.Classification", b =>
                {
                    b.Property<Guid>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("ClassLevel")
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ClassPrice")
                        .HasColumnType("float");

                    b.HasKey("ClassID");

                    b.ToTable("Classification", (string)null);

                    b.HasData(
                        new
                        {
                            ClassID = new Guid("8a77b1fd-dee9-41e9-a3ee-0302b14fa77b"),
                            ClassLevel = 1,
                            ClassName = "Basic",
                            ClassPrice = 0.0
                        },
                        new
                        {
                            ClassID = new Guid("51d085df-c6c5-47c5-bf94-3ee7ac5f0a75"),
                            ClassLevel = 2,
                            ClassName = "Premium",
                            ClassPrice = 100.0
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.Genre", b =>
                {
                    b.Property<Guid>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("Genre", (string)null);

                    b.HasData(
                        new
                        {
                            GenreID = new Guid("2356ff0f-d132-4b35-a959-67ecfcfb32ce"),
                            GenreName = "Action"
                        },
                        new
                        {
                            GenreID = new Guid("63da580f-031e-45bb-bf7b-cf5416ee0105"),
                            GenreName = "Adventure"
                        },
                        new
                        {
                            GenreID = new Guid("197594fa-a4f9-4f2a-84fa-7028d52e9200"),
                            GenreName = "Comedy"
                        },
                        new
                        {
                            GenreID = new Guid("417b95a0-ff35-4799-ae9d-a3d131aaeddc"),
                            GenreName = "Cartoon"
                        },
                        new
                        {
                            GenreID = new Guid("476c9346-c09c-455e-93a4-b0874a36e8eb"),
                            GenreName = "Crime & Gangster"
                        },
                        new
                        {
                            GenreID = new Guid("7561b2ef-c258-4dca-b0b1-99cf461bba80"),
                            GenreName = "Drama Films"
                        },
                        new
                        {
                            GenreID = new Guid("db471aff-ea54-496a-836d-b95bb8099c1f"),
                            GenreName = "Epics / Hisorical"
                        },
                        new
                        {
                            GenreID = new Guid("bd7a8bcc-fcdf-433b-a756-d24ee794dd79"),
                            GenreName = "Horror Films"
                        },
                        new
                        {
                            GenreID = new Guid("47256245-5f4e-419f-9495-b1960d1c8b56"),
                            GenreName = "Mucicals (Dance)"
                        },
                        new
                        {
                            GenreID = new Guid("cd8a26c7-61eb-4a84-ac7c-9f342ad8f735"),
                            GenreName = "Science Fiction"
                        },
                        new
                        {
                            GenreID = new Guid("63f63d7c-d5b9-46ae-96b7-b6c2a5d00c39"),
                            GenreName = "War (Anti-war)"
                        },
                        new
                        {
                            GenreID = new Guid("5f2f1b35-311e-4bd9-b0b5-5e3452f50add"),
                            GenreName = "Westerns"
                        },
                        new
                        {
                            GenreID = new Guid("25f3db4c-dd66-4e95-a2b9-c9d4b85808c0"),
                            GenreName = "Romance"
                        },
                        new
                        {
                            GenreID = new Guid("fa7ad1c6-c4fb-4cf3-9466-a794d23efcac"),
                            GenreName = "Tragedy"
                        },
                        new
                        {
                            GenreID = new Guid("cbc5754b-bac4-4679-9909-bfedc4d26dcd"),
                            GenreName = "Documentary"
                        },
                        new
                        {
                            GenreID = new Guid("23a5c7fd-7e2c-440f-bc3d-f7900676c0fd"),
                            GenreName = "Sitcom"
                        },
                        new
                        {
                            GenreID = new Guid("98fd3476-9fbb-4c43-b43f-e674a9766093"),
                            GenreName = "Documentary"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.Property<Guid>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Actor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseYear")
                        .HasColumnType("datetime2");

                    b.Property<float>("RunningTime")
                        .HasColumnType("real");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieID");

                    b.HasIndex("ClassID");

                    b.HasIndex("GenreID");

                    b.HasIndex("UserID");

                    b.ToTable("MovieInformation", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.MovieType", b =>
                {
                    b.Property<Guid>("MovieTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("MovieTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieTypeID");

                    b.ToTable("MovieType", (string)null);

                    b.HasData(
                        new
                        {
                            MovieTypeID = new Guid("3f503564-20b1-4300-b19b-14c3ed1f529f"),
                            MovieTypeName = "Short Video"
                        },
                        new
                        {
                            MovieTypeID = new Guid("b81c4808-b104-4c55-aae0-43bc563c77bf"),
                            MovieTypeName = "Movie Theater"
                        },
                        new
                        {
                            MovieTypeID = new Guid("6b6d3e0b-189b-4fc4-bed7-1cbf3eaf5e24"),
                            MovieTypeName = "TV Show"
                        },
                        new
                        {
                            MovieTypeID = new Guid("68a8910d-a771-492f-a952-954a49e4fd84"),
                            MovieTypeName = "Movie Confession"
                        },
                        new
                        {
                            MovieTypeID = new Guid("d2982a45-4dbe-48da-b9e0-aa5cbe6e0687"),
                            MovieTypeName = "Exclusive movie"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.MovieTypeInformation", b =>
                {
                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieID", "MovieTypeID");

                    b.HasIndex("MovieTypeID");

                    b.ToTable("MovieTypeInformation", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.Profile", b =>
                {
                    b.Property<Guid>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User_");

                    b.Property<string>("LastName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("1b1d12ce-7ba5-40a8-9ffb-8249e21812d6");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfileID");

                    b.HasIndex("ClassID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.Review", b =>
                {
                    b.Property<Guid>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewID");

                    b.HasIndex("MovieID");

                    b.HasIndex("UserID");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.Token", b =>
                {
                    b.Property<Guid>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AuthorizationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("AuthorizationID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.HasOne("MovieAPI.Data.Classification", "Classification")
                        .WithMany("MovieInformations")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_Many_To_One_Classification");

                    b.HasOne("MovieAPI.Data.Genre", "Genre")
                        .WithMany("MovieInformations")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_One_Genre");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithMany("MovieInformations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_Many_MovieInformation");

                    b.Navigation("Classification");

                    b.Navigation("Genre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.MovieTypeInformation", b =>
                {
                    b.HasOne("MovieAPI.Data.MovieInformation", "MovieInformation")
                        .WithMany("MovieTypeInformations")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_Many_MovieTypeInformation");

                    b.HasOne("MovieAPI.Data.MovieType", "MovieType")
                        .WithMany("MovieTypeInformations")
                        .HasForeignKey("MovieTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieType_One_To_Many_MovieTypeInformation");

                    b.Navigation("MovieInformation");

                    b.Navigation("MovieType");
                });

            modelBuilder.Entity("MovieAPI.Data.Profile", b =>
                {
                    b.HasOne("MovieAPI.Data.Classification", "Classification")
                        .WithMany("Profiles")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_Profile_One_To_One_Classification");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("MovieAPI.Data.Profile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_Profile_One_To_One_User");

                    b.Navigation("Classification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Review", b =>
                {
                    b.HasOne("MovieAPI.Data.MovieInformation", "MovieInformation")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_Many_Review");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_Many_Review");

                    b.Navigation("MovieInformation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Token", b =>
                {
                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("MovieAPI.Data.Token", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_One_Token");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.HasOne("MovieAPI.Data.Authorization", "Authorization")
                        .WithMany("User")
                        .HasForeignKey("AuthorizationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_User_Many_To_One_Authorization");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("MovieAPI.Data.Authorization", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Classification", b =>
                {
                    b.Navigation("MovieInformations");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("MovieAPI.Data.Genre", b =>
                {
                    b.Navigation("MovieInformations");
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.Navigation("MovieTypeInformations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MovieAPI.Data.MovieType", b =>
                {
                    b.Navigation("MovieTypeInformations");
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.Navigation("MovieInformations");

                    b.Navigation("Profile");

                    b.Navigation("Reviews");

                    b.Navigation("Token");
                });
#pragma warning restore 612, 618
        }
    }
}
