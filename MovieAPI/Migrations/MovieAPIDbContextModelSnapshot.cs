// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAPI.Data.DbConfig;

#nullable disable

namespace MovieAPI.Migrations
{
    [DbContext(typeof(MovieAPIDbContext))]
    partial class MovieAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieAPI.Data.Authorization", b =>
                {
                    b.Property<Guid>("AuthorizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AuthorizationLevel")
                        .HasColumnType("int");

                    b.Property<string>("AuthorizationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorizationID");

                    b.ToTable("Authorization", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorizationID = new Guid("63e9479f-308e-4b40-809f-4a36197e7194"),
                            AuthorizationLevel = 1,
                            AuthorizationName = "Normal User"
                        },
                        new
                        {
                            AuthorizationID = new Guid("f4d7ab68-398d-441d-aec9-ab3f96fa5e40"),
                            AuthorizationLevel = 2,
                            AuthorizationName = "Film Poducer"
                        },
                        new
                        {
                            AuthorizationID = new Guid("9ab24764-9eca-4a5c-8dd3-6fbbf49c2b80"),
                            AuthorizationLevel = 3,
                            AuthorizationName = "Admin"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.Classification", b =>
                {
                    b.Property<Guid>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("ClassLevel")
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ClassPrice")
                        .HasColumnType("float");

                    b.HasKey("ClassID");

                    b.ToTable("Classification", (string)null);

                    b.HasData(
                        new
                        {
                            ClassID = new Guid("37edf2c1-3cc3-4ed1-bf93-929f424736e6"),
                            ClassLevel = 1,
                            ClassName = "Basic",
                            ClassPrice = 0.0
                        },
                        new
                        {
                            ClassID = new Guid("f1a39d16-eaa3-4022-8ce3-6ce7835a55b9"),
                            ClassLevel = 2,
                            ClassName = "Premium",
                            ClassPrice = 100.0
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.Genre", b =>
                {
                    b.Property<Guid>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("Genre", (string)null);

                    b.HasData(
                        new
                        {
                            GenreID = new Guid("415cc598-f313-4a3a-b0a8-355b69857fa7"),
                            GenreName = "Action"
                        },
                        new
                        {
                            GenreID = new Guid("edf567b4-c02e-4d76-861b-577b9bad2e3c"),
                            GenreName = "Adventure"
                        },
                        new
                        {
                            GenreID = new Guid("4fe2d57d-6569-4acc-a97f-fe4ed7535510"),
                            GenreName = "Comedy"
                        },
                        new
                        {
                            GenreID = new Guid("62ade6a6-b2ef-4dfb-86df-d86a90ed15bd"),
                            GenreName = "Cartoon"
                        },
                        new
                        {
                            GenreID = new Guid("b0e32d17-8381-41b3-a978-a2f18a63c6f7"),
                            GenreName = "Crime & Gangster"
                        },
                        new
                        {
                            GenreID = new Guid("eb538398-298f-4e3a-bdf1-efb2ac9d8e14"),
                            GenreName = "Drama Films"
                        },
                        new
                        {
                            GenreID = new Guid("dda59f1d-b580-492b-8547-58213874c323"),
                            GenreName = "Epics / Hisorical"
                        },
                        new
                        {
                            GenreID = new Guid("f21fce82-cc03-434e-ac26-95e26b7cfa78"),
                            GenreName = "Horror Films"
                        },
                        new
                        {
                            GenreID = new Guid("1286a972-7aae-433e-87d9-14935a8ea7b2"),
                            GenreName = "Mucicals (Dance)"
                        },
                        new
                        {
                            GenreID = new Guid("3e25a731-d9f0-4ce3-9d42-00ee3b617c9d"),
                            GenreName = "Science Fiction"
                        },
                        new
                        {
                            GenreID = new Guid("4f478506-f01e-49a3-9837-e653bdf72124"),
                            GenreName = "War (Anti-war)"
                        },
                        new
                        {
                            GenreID = new Guid("fc59c8fc-f627-44b6-b2ff-e40333675d3f"),
                            GenreName = "Westerns"
                        },
                        new
                        {
                            GenreID = new Guid("c027ce73-bd7b-4630-b17f-683f6160d69c"),
                            GenreName = "Romance"
                        },
                        new
                        {
                            GenreID = new Guid("41282142-2f66-43d5-91ec-9e86ad78e4b3"),
                            GenreName = "Tragedy"
                        },
                        new
                        {
                            GenreID = new Guid("02b3e5a7-c72c-48f8-a9cd-b99df8355bca"),
                            GenreName = "Documentary"
                        },
                        new
                        {
                            GenreID = new Guid("e8ff2466-d57f-481b-9419-d0072f1433cc"),
                            GenreName = "Sitcom"
                        },
                        new
                        {
                            GenreID = new Guid("79387353-3d4b-4dc0-bc50-9f6161c8f88e"),
                            GenreName = "Documentary"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.Property<Guid>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Actor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MovieTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MovieURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RunningTime")
                        .HasColumnType("real");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieID");

                    b.HasIndex("ClassID");

                    b.HasIndex("GenreID");

                    b.HasIndex("MovieTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("MovieInformation", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.MovieType", b =>
                {
                    b.Property<Guid>("MovieTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("MovieTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieTypeID");

                    b.ToTable("MovieType", (string)null);

                    b.HasData(
                        new
                        {
                            MovieTypeID = new Guid("4ad82e82-b4f6-4a9d-a94e-df3761c06c72"),
                            MovieTypeName = "Short Video"
                        },
                        new
                        {
                            MovieTypeID = new Guid("e4e84026-8a3d-4d8e-a47d-d6ee51060601"),
                            MovieTypeName = "Movie Theater"
                        },
                        new
                        {
                            MovieTypeID = new Guid("1e69e16c-31fb-4059-8264-146416c0fc4b"),
                            MovieTypeName = "TV Show"
                        },
                        new
                        {
                            MovieTypeID = new Guid("de39405d-4235-4926-840b-760338cdb421"),
                            MovieTypeName = "Movie Confession"
                        },
                        new
                        {
                            MovieTypeID = new Guid("dde622e4-8c18-4215-a476-c7d4e4bf8c28"),
                            MovieTypeName = "Exclusive movie"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.Profile", b =>
                {
                    b.Property<Guid>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User_");

                    b.Property<string>("LastName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("5168b7e1-085f-45bd-be8b-cac77549aea9");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfileID");

                    b.HasIndex("ClassID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.Review", b =>
                {
                    b.Property<Guid>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewID");

                    b.HasIndex("MovieID");

                    b.HasIndex("UserID");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.Token", b =>
                {
                    b.Property<Guid>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AuthorizationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("AuthorizationID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.HasOne("MovieAPI.Data.Classification", "Classification")
                        .WithMany("MovieInformations")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_Many_To_One_Classification");

                    b.HasOne("MovieAPI.Data.Genre", "Genre")
                        .WithMany("MovieInformations")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_One_Genre");

                    b.HasOne("MovieAPI.Data.MovieType", "MovieType")
                        .WithMany("MovieInformations")
                        .HasForeignKey("MovieTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_One_MovieType");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithMany("MovieInformations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_Many_MovieInformation");

                    b.Navigation("Classification");

                    b.Navigation("Genre");

                    b.Navigation("MovieType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Profile", b =>
                {
                    b.HasOne("MovieAPI.Data.Classification", "Classification")
                        .WithMany("Profiles")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_Profile_One_To_One_Classification");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("MovieAPI.Data.Profile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_Profile_One_To_One_User");

                    b.Navigation("Classification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Review", b =>
                {
                    b.HasOne("MovieAPI.Data.MovieInformation", "MovieInformation")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_Many_Review");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_Many_Review");

                    b.Navigation("MovieInformation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Token", b =>
                {
                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("MovieAPI.Data.Token", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_One_Token");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.HasOne("MovieAPI.Data.Authorization", "Authorization")
                        .WithMany("User")
                        .HasForeignKey("AuthorizationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_User_Many_To_One_Authorization");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("MovieAPI.Data.Authorization", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Classification", b =>
                {
                    b.Navigation("MovieInformations");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("MovieAPI.Data.Genre", b =>
                {
                    b.Navigation("MovieInformations");
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MovieAPI.Data.MovieType", b =>
                {
                    b.Navigation("MovieInformations");
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.Navigation("MovieInformations");

                    b.Navigation("Profile");

                    b.Navigation("Reviews");

                    b.Navigation("Token");
                });
#pragma warning restore 612, 618
        }
    }
}
