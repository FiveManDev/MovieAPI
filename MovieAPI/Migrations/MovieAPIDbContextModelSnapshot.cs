// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAPI.Data.DbConfig;

#nullable disable

namespace MovieAPI.Migrations
{
    [DbContext(typeof(MovieAPIDbContext))]
    partial class MovieAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieAPI.Data.Authorization", b =>
                {
                    b.Property<Guid>("AuthorizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AuthorizationLevel")
                        .HasColumnType("int");

                    b.Property<string>("AuthorizationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorizationID");

                    b.ToTable("Authorization", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorizationID = new Guid("3db2b025-a20c-460d-8810-36aa273229be"),
                            AuthorizationLevel = 1,
                            AuthorizationName = "Normal User"
                        },
                        new
                        {
                            AuthorizationID = new Guid("eb09ecca-0779-4a06-80b3-3df64590d773"),
                            AuthorizationLevel = 2,
                            AuthorizationName = "Film Poducer"
                        },
                        new
                        {
                            AuthorizationID = new Guid("147aad7e-eefe-4b49-b637-7aa5dfaa38ab"),
                            AuthorizationLevel = 3,
                            AuthorizationName = "Admin"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.Classification", b =>
                {
                    b.Property<Guid>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("ClassLevel")
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ClassPrice")
                        .HasColumnType("float");

                    b.HasKey("ClassID");

                    b.ToTable("Classification", (string)null);

                    b.HasData(
                        new
                        {
                            ClassID = new Guid("e360722f-7405-4278-a4b2-17497036cef0"),
                            ClassLevel = 1,
                            ClassName = "Basic",
                            ClassPrice = 0.0
                        },
                        new
                        {
                            ClassID = new Guid("84251a89-a458-46f8-ba28-83df593ed2a9"),
                            ClassLevel = 2,
                            ClassName = "Premium",
                            ClassPrice = 100.0
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.Genre", b =>
                {
                    b.Property<Guid>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("Genre", (string)null);

                    b.HasData(
                        new
                        {
                            GenreID = new Guid("9ad897ac-89d2-4ef0-be64-a7d58dfd5f8d"),
                            GenreName = "Action"
                        },
                        new
                        {
                            GenreID = new Guid("ac9c04ad-885e-4c73-b035-3e53b5e34284"),
                            GenreName = "Adventure"
                        },
                        new
                        {
                            GenreID = new Guid("cd3e7605-81ac-4a97-9ca3-58ed958fb4b6"),
                            GenreName = "Comedy"
                        },
                        new
                        {
                            GenreID = new Guid("350af705-bd31-40ab-8b0f-3a064d4e3df9"),
                            GenreName = "Cartoon"
                        },
                        new
                        {
                            GenreID = new Guid("003a894b-36a8-4471-b906-dc627a6ce9c2"),
                            GenreName = "Crime & Gangster"
                        },
                        new
                        {
                            GenreID = new Guid("8782bbd0-2f56-4fd4-89d6-081396549bfb"),
                            GenreName = "Drama Films"
                        },
                        new
                        {
                            GenreID = new Guid("f2427dc3-481e-4e31-8f81-d06526bdaf58"),
                            GenreName = "Epics / Hisorical"
                        },
                        new
                        {
                            GenreID = new Guid("800101db-589a-48b7-9126-24ee55465a9d"),
                            GenreName = "Horror Films"
                        },
                        new
                        {
                            GenreID = new Guid("f8b486a9-6c27-4d34-be35-2f9a0cfa9999"),
                            GenreName = "Mucicals (Dance)"
                        },
                        new
                        {
                            GenreID = new Guid("32ab71e0-a75d-4d39-8d5d-e66525477d48"),
                            GenreName = "Science Fiction"
                        },
                        new
                        {
                            GenreID = new Guid("ca44f559-803f-4daf-b024-9c870c62318e"),
                            GenreName = "War (Anti-war)"
                        },
                        new
                        {
                            GenreID = new Guid("295c36f4-54d7-4183-b6b1-450054047200"),
                            GenreName = "Westerns"
                        },
                        new
                        {
                            GenreID = new Guid("22849f83-a5b4-49eb-93ed-e2d942254521"),
                            GenreName = "Romance"
                        },
                        new
                        {
                            GenreID = new Guid("6ac68c37-0ae3-478f-9c22-9cf22fa3db1c"),
                            GenreName = "Tragedy"
                        },
                        new
                        {
                            GenreID = new Guid("15f25288-4ff7-4bcf-b9ae-11fc91074863"),
                            GenreName = "Documentary"
                        },
                        new
                        {
                            GenreID = new Guid("63da4fe0-de4d-4c8e-b8c8-ec3202c20038"),
                            GenreName = "Sitcom"
                        },
                        new
                        {
                            GenreID = new Guid("f75bf4cb-64a6-4d25-af4d-712da6e3e9bf"),
                            GenreName = "Documentary"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.MovieGenreInformation", b =>
                {
                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieID", "GenreID");

                    b.HasIndex("GenreID");

                    b.ToTable("MovieGenreInformation", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.Property<Guid>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Actor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MovieTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MovieURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseYear")
                        .HasColumnType("datetime2");

                    b.Property<float>("RunningTime")
                        .HasColumnType("real");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieID");

                    b.HasIndex("ClassID");

                    b.HasIndex("MovieTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("MovieInformation", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.MovieType", b =>
                {
                    b.Property<Guid>("MovieTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("MovieTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieTypeID");

                    b.ToTable("MovieType", (string)null);

                    b.HasData(
                        new
                        {
                            MovieTypeID = new Guid("6a213e3d-6121-490e-87fc-747ba820491e"),
                            MovieTypeName = "Short Video"
                        },
                        new
                        {
                            MovieTypeID = new Guid("ebfd7919-7210-4c54-bb76-fa37dcc191a3"),
                            MovieTypeName = "Movie Theater"
                        },
                        new
                        {
                            MovieTypeID = new Guid("99b8a1ab-1302-4443-9ef7-95fae52b4938"),
                            MovieTypeName = "TV Show"
                        },
                        new
                        {
                            MovieTypeID = new Guid("7cb6ef5f-648a-477a-9172-5172ff4f7868"),
                            MovieTypeName = "Movie Confession"
                        },
                        new
                        {
                            MovieTypeID = new Guid("c956e62b-5709-4a4a-85b0-6a3452b48abf"),
                            MovieTypeName = "Exclusive movie"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.Profile", b =>
                {
                    b.Property<Guid>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User_");

                    b.Property<string>("LastName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("e4ae11e0-a9ad-4753-9616-d5f569e2b19e");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfileID");

                    b.HasIndex("ClassID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.Review", b =>
                {
                    b.Property<Guid>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewID");

                    b.HasIndex("MovieID");

                    b.HasIndex("UserID");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.Token", b =>
                {
                    b.Property<Guid>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AuthorizationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("AuthorizationID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.MovieGenreInformation", b =>
                {
                    b.HasOne("MovieAPI.Data.Genre", "Genre")
                        .WithMany("MovieGenreInformations")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_Genre_One_To_Many_MovieGenreInformation");

                    b.HasOne("MovieAPI.Data.MovieInformation", "MovieInformation")
                        .WithMany("MovieGenreInformations")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_Many_MovieGenreInformation");

                    b.Navigation("Genre");

                    b.Navigation("MovieInformation");
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.HasOne("MovieAPI.Data.Classification", "Classification")
                        .WithMany("MovieInformations")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_Many_To_One_Classification");

                    b.HasOne("MovieAPI.Data.MovieType", "MovieType")
                        .WithMany("MovieInformations")
                        .HasForeignKey("MovieTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_One_MovieType");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithMany("MovieInformations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_Many_MovieInformation");

                    b.Navigation("Classification");

                    b.Navigation("MovieType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Profile", b =>
                {
                    b.HasOne("MovieAPI.Data.Classification", "Classification")
                        .WithMany("Profiles")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_Profile_One_To_One_Classification");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("MovieAPI.Data.Profile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_Profile_One_To_One_User");

                    b.Navigation("Classification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Review", b =>
                {
                    b.HasOne("MovieAPI.Data.MovieInformation", "MovieInformation")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_Many_Review");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_Many_Review");

                    b.Navigation("MovieInformation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Token", b =>
                {
                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("MovieAPI.Data.Token", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_One_Token");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.HasOne("MovieAPI.Data.Authorization", "Authorization")
                        .WithMany("User")
                        .HasForeignKey("AuthorizationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_User_Many_To_One_Authorization");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("MovieAPI.Data.Authorization", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Classification", b =>
                {
                    b.Navigation("MovieInformations");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("MovieAPI.Data.Genre", b =>
                {
                    b.Navigation("MovieGenreInformations");
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.Navigation("MovieGenreInformations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MovieAPI.Data.MovieType", b =>
                {
                    b.Navigation("MovieInformations");
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.Navigation("MovieInformations");

                    b.Navigation("Profile");

                    b.Navigation("Reviews");

                    b.Navigation("Token");
                });
#pragma warning restore 612, 618
        }
    }
}
