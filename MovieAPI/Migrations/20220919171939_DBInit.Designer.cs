// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAPI.Data.DbConfig;

#nullable disable

namespace MovieAPI.Migrations
{
    [DbContext(typeof(MovieAPIDbContext))]
    [Migration("20220919171939_DBInit")]
    partial class DBInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieAPI.Data.Authorization", b =>
                {
                    b.Property<Guid>("AuthorizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AuthorizationLevel")
                        .HasColumnType("int");

                    b.Property<string>("AuthorizationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorizationID");

                    b.ToTable("Authorization", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorizationID = new Guid("f72b7ba0-0357-4728-9e05-6ff9f523aba1"),
                            AuthorizationLevel = 1,
                            AuthorizationName = "Normal User"
                        },
                        new
                        {
                            AuthorizationID = new Guid("26a16182-8f45-4911-b143-a4f5d12abcba"),
                            AuthorizationLevel = 2,
                            AuthorizationName = "Film Poducer"
                        },
                        new
                        {
                            AuthorizationID = new Guid("df57c066-37c8-4ea3-a5f0-842e90da4bc5"),
                            AuthorizationLevel = 3,
                            AuthorizationName = "Admin"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.Classification", b =>
                {
                    b.Property<Guid>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("ClassLevel")
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ClassPrice")
                        .HasColumnType("float");

                    b.HasKey("ClassID");

                    b.ToTable("Classification", (string)null);

                    b.HasData(
                        new
                        {
                            ClassID = new Guid("fcc5e61d-d2c5-4688-b6ca-d53b9937252f"),
                            ClassLevel = 1,
                            ClassName = "Basic",
                            ClassPrice = 0.0
                        },
                        new
                        {
                            ClassID = new Guid("5e9fa6f3-fbd7-46ce-9194-0d4342d26a47"),
                            ClassLevel = 2,
                            ClassName = "Premium",
                            ClassPrice = 100.0
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.Genre", b =>
                {
                    b.Property<Guid>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("Genre", (string)null);

                    b.HasData(
                        new
                        {
                            GenreID = new Guid("ba11ea3b-017e-419d-9bdd-2bcbf138be20"),
                            GenreName = "Action"
                        },
                        new
                        {
                            GenreID = new Guid("6579a651-c8cd-4a70-930a-270971e65169"),
                            GenreName = "Adventure"
                        },
                        new
                        {
                            GenreID = new Guid("6cafee67-7357-44a8-97cd-5526765819d1"),
                            GenreName = "Comedy"
                        },
                        new
                        {
                            GenreID = new Guid("4106ce85-99c1-4838-b88a-59a03aeafaf0"),
                            GenreName = "Cartoon"
                        },
                        new
                        {
                            GenreID = new Guid("0cf840ee-b757-4491-ad56-af8ddc9e60fa"),
                            GenreName = "Crime & Gangster"
                        },
                        new
                        {
                            GenreID = new Guid("68467152-d46c-4b91-851c-9d8ec1c094a4"),
                            GenreName = "Drama Films"
                        },
                        new
                        {
                            GenreID = new Guid("0f6c4b1d-f667-4cb0-be31-698b2261c182"),
                            GenreName = "Epics / Hisorical"
                        },
                        new
                        {
                            GenreID = new Guid("474c3cad-933d-457b-b03f-d4329176ecba"),
                            GenreName = "Horror Films"
                        },
                        new
                        {
                            GenreID = new Guid("be76f7eb-b98c-4081-9e7c-a7ff51e14ab2"),
                            GenreName = "Mucicals (Dance)"
                        },
                        new
                        {
                            GenreID = new Guid("68fffc55-c6d4-4d60-9198-01daa7246d3b"),
                            GenreName = "Science Fiction"
                        },
                        new
                        {
                            GenreID = new Guid("49d5a98a-7a97-4ac6-b4dc-2aa852867612"),
                            GenreName = "War (Anti-war)"
                        },
                        new
                        {
                            GenreID = new Guid("a4df0fc5-8c37-499d-8b32-3f7657b0f890"),
                            GenreName = "Westerns"
                        },
                        new
                        {
                            GenreID = new Guid("4cc76a6e-b15d-4d02-b9e7-25dab9d2a684"),
                            GenreName = "Romance"
                        },
                        new
                        {
                            GenreID = new Guid("ed31a14d-c0be-4e33-ae97-91dd1f903b9d"),
                            GenreName = "Tragedy"
                        },
                        new
                        {
                            GenreID = new Guid("eb537f9e-ee73-4eb0-9d00-23a1964bae39"),
                            GenreName = "Documentary"
                        },
                        new
                        {
                            GenreID = new Guid("9801a120-0ab3-460f-81e9-1f8d05ee356d"),
                            GenreName = "Sitcom"
                        },
                        new
                        {
                            GenreID = new Guid("a1027cb7-d4f4-4c0c-9092-5df7935becb5"),
                            GenreName = "Documentary"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.Property<Guid>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Actor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MovieTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MovieURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RunningTime")
                        .HasColumnType("real");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieID");

                    b.HasIndex("ClassID");

                    b.HasIndex("GenreID");

                    b.HasIndex("MovieTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("MovieInformation", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.MovieType", b =>
                {
                    b.Property<Guid>("MovieTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("MovieTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieTypeID");

                    b.ToTable("MovieType", (string)null);

                    b.HasData(
                        new
                        {
                            MovieTypeID = new Guid("e667cee1-ff61-4dbc-bf57-ed4f4d2878c6"),
                            MovieTypeName = "Short Video"
                        },
                        new
                        {
                            MovieTypeID = new Guid("e0100654-cf05-48df-bcd3-bd6196141d32"),
                            MovieTypeName = "Movie Theater"
                        },
                        new
                        {
                            MovieTypeID = new Guid("26c28429-a9ad-4f92-bbd3-12261f9bb9b2"),
                            MovieTypeName = "TV Show"
                        },
                        new
                        {
                            MovieTypeID = new Guid("25af33ba-965b-41cc-b961-4d4afdc659b0"),
                            MovieTypeName = "Movie Confession"
                        },
                        new
                        {
                            MovieTypeID = new Guid("ccd9a085-321e-4d64-9298-71c0c6544035"),
                            MovieTypeName = "Exclusive movie"
                        });
                });

            modelBuilder.Entity("MovieAPI.Data.Profile", b =>
                {
                    b.Property<Guid>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User_");

                    b.Property<string>("LastName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("7956afd6-3597-4c58-9a73-a1fda0533446");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfileID");

                    b.HasIndex("ClassID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.Review", b =>
                {
                    b.Property<Guid>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewID");

                    b.HasIndex("MovieID");

                    b.HasIndex("UserID");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.Token", b =>
                {
                    b.Property<Guid>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Token", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AuthorizationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("AuthorizationID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.HasOne("MovieAPI.Data.Classification", "Classification")
                        .WithMany("MovieInformations")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_Many_To_One_Classification");

                    b.HasOne("MovieAPI.Data.Genre", "Genre")
                        .WithMany("MovieInformations")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_One_Genre");

                    b.HasOne("MovieAPI.Data.MovieType", "MovieType")
                        .WithMany("MovieInformations")
                        .HasForeignKey("MovieTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_One_MovieType");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithMany("MovieInformations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_Many_MovieInformation");

                    b.Navigation("Classification");

                    b.Navigation("Genre");

                    b.Navigation("MovieType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Profile", b =>
                {
                    b.HasOne("MovieAPI.Data.Classification", "Classification")
                        .WithMany("Profiles")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_Profile_One_To_One_Classification");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("MovieAPI.Data.Profile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_Profile_One_To_One_User");

                    b.Navigation("Classification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Review", b =>
                {
                    b.HasOne("MovieAPI.Data.MovieInformation", "MovieInformation")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_MovieInformation_One_To_Many_Review");

                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_Many_Review");

                    b.Navigation("MovieInformation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Token", b =>
                {
                    b.HasOne("MovieAPI.Data.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("MovieAPI.Data.Token", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PK_User_One_To_One_Token");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.HasOne("MovieAPI.Data.Authorization", "Authorization")
                        .WithMany("User")
                        .HasForeignKey("AuthorizationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PK_User_Many_To_One_Authorization");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("MovieAPI.Data.Authorization", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Data.Classification", b =>
                {
                    b.Navigation("MovieInformations");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("MovieAPI.Data.Genre", b =>
                {
                    b.Navigation("MovieInformations");
                });

            modelBuilder.Entity("MovieAPI.Data.MovieInformation", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MovieAPI.Data.MovieType", b =>
                {
                    b.Navigation("MovieInformations");
                });

            modelBuilder.Entity("MovieAPI.Data.User", b =>
                {
                    b.Navigation("MovieInformations");

                    b.Navigation("Profile");

                    b.Navigation("Reviews");

                    b.Navigation("Token");
                });
#pragma warning restore 612, 618
        }
    }
}
